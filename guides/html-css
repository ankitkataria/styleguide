<div id="html-css-div">
  <br/>
  <h2>General Style Rules</h2>
  <h3>Protocol</h3>
  <blockquote>
    Omit the protocol from embedded resources.
  </blockquote>
  <div class="section-description">
    <p>
      Omit the protocol portion (<code>http:</code>,
      <code>https:</code>) from URLs pointing to images and other
      media files, style sheets, and scripts unless the respective
      files are not available over both protocols.
    </p>
    <p>
      Omitting the protocol&#8212;which makes the URL
      relative&#8212;prevents mixed content issues and results in
      minor file size savings.
    </p>
    <code class="bad-code">
      &lt;!-- Not recommended --&gt;
      &lt;script src="http://www.google.com/js/gweb/analytics/autotrack.js"&gt;&lt;/script&gt;
    </code>
    <code class="good-code">
      &lt;!-- Recommended --&gt;
      &lt;script src="//www.google.com/js/gweb/analytics/autotrack.js"&gt;&lt;/script&gt;
    </code>
    <code class="bad-code">
      /* Not recommended */
      .example {
        background: url(http://www.google.com/images/example);
      }
    </code>
    <code class="good-code">
      /* Recommended */
      .example {
        background: url(//www.google.com/images/example);
      }
    </code>
  </div>
    

  <h2>General Formatting Rules</h2>
    <h3>Indentation</h3>
      <blockquote>
        Indent by 2 spaces at a time.
      </blockquote>
      <div class="section-description">
        <p>
          Don&#8217;t use tabs or mix tabs and spaces for indentation.
        </p>
        <code class="good-code">
          &lt;ul&gt;
            &lt;li&gt;Fantastic
            &lt;li&gt;Great
          &lt;/ul&gt;
        </code>
        <code class="good-code">
          .example {
            color: blue;
          }
        </code>
      </div>
    <h3>Capitalization</h3>
      <blockquote>
        Use only lowercase.
      </blockquote>
      <div class="section-description">
        <p>
          All code has to be lowercase: This applies to element names,
          attributes, attribute values (unless
          text/<code>CDATA</code>), selectors, properties, and
          property values (with the exception of strings).
        </p>
        <code class="bad-code">
          &lt;!-- Not recommended --&gt;
          &lt;A HREF="/"&gt;Home&lt;/A&gt;
        </code>
        <code class="good-code">
          &lt;!-- Recommended --&gt;
          &lt;img src="google.png" alt="Google"&gt;
        </code>
      </div>
    <h3>Trailing whitespace</h3>
      <blockquote>
        Remove trailing white spaces.
      </blockquote>
      <div class="section-description">
        <p>
          Trailing white spaces are unnecessary and can complicate
          diffs.
        </p>
        <code class="bad-code">
          &lt;!-- Not recommended --&gt;
          &lt;p&gt;What?_
        </code>
        <code class="good-code">
          &lt;!-- Recommended --&gt;
          &lt;p&gt;Yes please.
        </code>
      </div>

  <h2>General Meta Rules</h2>
    <h3>Encoding</h3>
      <blockquote>
        Use UTF-8 (no BOM).
      </blockquote>
      <div class="section-description">
        <p>
          Make sure your editor uses UTF-8 as character encoding,
          without a byte order mark.
        </p>
        <p>
          Specify the encoding in HTML templates and documents via
          <code>&lt;meta charset="utf-8"&gt;</code>. Do not specify
          the encoding of style sheets as these assume UTF-8.
        </p>
        <p>
          (More on encodings and when and how to specify them can be
          found in <a href="http://www.w3.org/International/tutorials/tutorial-char-enc/">Handling
          character encodings in HTML and CSS</a>.)
        </p>
      </div>
    <h3>Comments</h3>
      <blockquote>
        Explain code as needed, where possible.
      </blockquote>
      <div class="section-description">
        <p>
          Use comments to explain code: What does it cover, what
          purpose does it serve, why is respective solution used or
          preferred?
        </p>
        <p>
          (This item is optional as it is not deemed a realistic
          expectation to always demand fully documented code. Mileage
          may vary heavily for HTML and CSS code and depends on the
          project&#8217;s complexity.)
        </p>
      </div>
    <h3>Action items</h3>
      <blockquote>
        Mark todos and action items with <code>TODO</code>.
      </blockquote>
      <div class="section-description">
        <p>
          Highlight todos by using the keyword <code>TODO</code> only,
          not other common formats like <code>@@</code>.
        </p>
        <p>
          Append a contact (username or mailing list) in parentheses
          as with the format <code>TODO(contact)</code>.
        </p>
        <p>
          Append action items after a colon as in <code>TODO: action
          item</code>.
        </p>
        
        <code class="good-code">
          {# TODO(john.doe): revisit centering #}
          &lt;center&gt;Test&lt;/center&gt;
        </code>
        
        <code class="good-code">
          &lt;!-- TODO: remove optional tags --&gt;
          &lt;ul&gt;
            &lt;li&gt;Apples&lt;/li&gt;
            &lt;li&gt;Oranges&lt;/li&gt;
          &lt;/ul&gt;
        </code>
      </div>

  <h2>HTML Style Rules</h2>
    <h3>Document type</h3>
      <blockquote>
        Use HTML5.
      </blockquote>
      <div class="section-description">
        <p>
          HTML5 (HTML syntax) is preferred for all HTML documents:
          <code>&lt;!DOCTYPE html&gt;</code>.
        </p>
        <p>
          (It&#8217;s recommended to use HTML, as <code>text/html</code>. Do not use
          XHTML. XHTML, as <a href="http://hixie.ch/advocacy/xhtml"><code>application/xhtml+xml</code></a>,
          lacks both browser and infrastructure support and offers
          less room for optimization than HTML.)
        </p>
        <p>
          Although fine with HTML, do not close void elements, i.e. write
          <code>&lt;br&gt;</code>, not <code>&lt;br /&gt;</code>.
        </p>
      </div>
    <h3>HTML validity</h3>
      <blockquote>
        Use valid HTML where possible.
      </blockquote>
      <div class="section-description">
        <p>
          Use valid HTML code unless that is not possible due to
          otherwise unattainable performance goals regarding file size.
        </p>
        
        <p>
          Use tools such as the
          <a href="http://validator.w3.org/nu/">W3C
          HTML validator</a> to test.
        </p>
        <p>
          Using valid HTML is a measurable baseline quality attribute
          that contributes to learning about technical requirements
          and constraints, and that ensures proper HTML usage.
        </p>
        <code class="bad-code">
          &lt;!-- Not recommended --&gt;
          &lt;title&gt;Test&lt;/title&gt;
          &lt;article&gt;This is only a test.
        </code>
        <code class="good-code">
          &lt;!-- Recommended --&gt;
          &lt;!DOCTYPE html&gt;
          &lt;meta charset="utf-8"&gt;
          &lt;title&gt;Test&lt;/title&gt;
          &lt;article&gt;This is only a test.&lt;/article&gt;
        </code>
      </div>
    <h3>Semantics</h3>
      <blockquote>
        Use HTML according to its purpose.
      </blockquote>
      <div class="section-description">
        <p>
          Use elements (sometimes incorrectly called &#8220;tags&#8221;) for what
          they have been created for. For example, use heading
          elements for headings, <code>p</code> elements for
          paragraphs, <code>a</code> elements for anchors, etc.
        </p>
        <p>
          Using HTML according to its purpose is important for
          accessibility, reuse, and code efficiency reasons.
        </p>
        
        <code class="bad-code">
          &lt;!-- Not recommended --&gt;
          &lt;div onclick="goToRecommendations();"&gt;All recommendations&lt;/div&gt;
        </code>
        <code class="good-code">
          &lt;!-- Recommended --&gt;
          &lt;a href="recommendations/"&gt;All recommendations&lt;/a&gt;
        </code>
      </div>
    <h3>Multimedia fallback</h3>
      <blockquote>
        Provide alternative contents for multimedia.
      </blockquote>
      <div class="section-description">
        <p>
          For multimedia, such as images, videos, animated objects via
          <code>canvas</code>, make sure to offer alternative
          access. For images that means use of meaningful alternative
          text (<code>alt</code>) and for video and audio transcripts
          and captions, if available.
        </p>
        <p>
          Providing alternative contents is important for
          accessibility reasons: A blind user has few cues to tell
          what an image is about without <code>@alt</code>, and other
          users may have no way of understanding what video or audio
          contents are about either.
        </p>
        <p>
          (For images whose <code>alt</code> attributes would
          introduce redundancy, and for images whose purpose is purely
          decorative which you cannot immediately use CSS for, use no
          alternative text, as in <code>alt=""</code>.)
        </p>
        
        <code class="bad-code">
          &lt;!-- Not recommended --&gt;
          &lt;img src="spreadsheet.png"&gt;
        </code>
        <code class="good-code">
          &lt;!-- Recommended --&gt;
          &lt;img src="spreadsheet.png" alt="Spreadsheet screenshot."&gt;
        </code>
      </div>

    <h3>Separation of concerns</h3>
      <blockquote>
        Separate structure from presentation from behavior.
      </blockquote>
      <div class="section-description">
        <p>
          Strictly keep structure (markup), presentation (styling),
          and behavior (scripting) apart, and try to keep the
          interaction between the three to an absolute minimum.
        </p>
        <p>
          That is, make sure documents and templates contain only HTML
          and HTML that is solely serving structural purposes. Move
          everything presentational into style sheets, and everything
          behavioral into scripts.
        </p>
        <p>
          In addition, keep the contact area as small as possible by
          linking as few style sheets and scripts as possible from
          documents and templates.
        </p>
        <p>
          Separating structure from presentation from behavior is
          important for maintenance reasons. It is always more
          expensive to change HTML documents and templates than it is
          to update style sheets and scripts.
        </p>
        
        <code class="bad-code">
          &lt;!-- Not recommended --&gt;
          &lt;!DOCTYPE html&gt;
          &lt;title&gt;HTML sucks&lt;/title&gt;
          &lt;link rel="stylesheet" href="base.css" media="screen"&gt;
          &lt;link rel="stylesheet" href="grid.css" media="screen"&gt;
          &lt;link rel="stylesheet" href="print.css" media="print"&gt;
          &lt;h1 style="font-size: 1em;"&gt;HTML sucks&lt;/h1&gt;
          &lt;p&gt;I&#8217;ve read about this on a few sites but now I&#8217;m sure:
            &lt;u&gt;HTML is stupid!!1&lt;/u&gt;
          &lt;center&gt;I can&#8217;t believe there&#8217;s no way to control the styling of
            my website without doing everything all over again!&lt;/center&gt;
        </code>
        <code class="good-code">
          &lt;!-- Recommended --&gt;
          &lt;!DOCTYPE html&gt;
          &lt;title&gt;My first CSS-only redesign&lt;/title&gt;
          &lt;link rel="stylesheet" href="default.css"&gt;
          &lt;h1&gt;My first CSS-only redesign&lt;/h1&gt;
          &lt;p&gt;I&#8217;ve read about this on a few sites but today I&#8217;m actually
            doing it: separating concerns and avoiding anything in the HTML of
            my website that is presentational.
          &lt;p&gt;It&#8217;s awesome!
        </code>
      </div>
    <h3>Entity references</h3>
      <blockquote>
        Do not use entity references.
      </blockquote>
      <div class="section-description">
        <p>
          There is no need to use entity references like
          <code>&amp;mdash;</code>, <code>&amp;rdquo;</code>, or
          <code>&amp;#x263a;</code>, assuming the same encoding
          (UTF-8) is used for files and editors as well as among
          teams.
        </p>
        <p>
          The only exceptions apply to characters with special meaning
          in HTML (like <code>&lt;</code> and <code>&amp;</code>) as
          well as control or &#8220;invisible&#8221; characters (like no-break
          spaces).
        </p>
        <code class="bad-code">
          &lt;!-- Not recommended --&gt;
          The currency symbol for the Euro is &amp;ldquo;&amp;eur;&amp;rdquo;.
        </code>
        <code class="good-code">
          &lt;!-- Recommended --&gt;
          The currency symbol for the Euro is &#8220;&#8364;&#8221;.
        </code>
      </div>
    <h3>Optional tags</h3>
      <blockquote>
        Omit optional tags (optional).
      </blockquote>
      <div class="section-description">
        <p>
          For file size optimization and scannability purposes,
          consider omitting optional tags.
          The <a href="http://www.whatwg.org/specs/web-apps/current-work/multipage/syntax.html#syntax-tag-omission">HTML5
          specification</a> defines what tags can be omitted.
        </p>
        <p>
          (This approach may require a grace period to be established
          as a wider guideline as it&#8217;s significantly different
          from what web developers are typically taught. For
          consistency and simplicity reasons it&#8217;s best served
          omitting all optional tags, not just a selection.)
        </p>
        <code class="bad-code">
          &lt;!-- Not recommended --&gt;
          &lt;!DOCTYPE html&gt;
          &lt;html&gt;
            &lt;head&gt;
              &lt;title&gt;Spending money, spending bytes&lt;/title&gt;
            &lt;/head&gt;
            &lt;body&gt;
              &lt;p&gt;Sic.&lt;/p&gt;
            &lt;/body&gt;
          &lt;/html&gt;
        </code>
        <code class="good-code">
          &lt;!-- Recommended --&gt;
          &lt;!DOCTYPE html&gt;
          &lt;title&gt;Saving money, saving bytes&lt;/title&gt;
          &lt;p&gt;Qed.
        </code>
      </div>
    <h3>type attributes</h3>
      <blockquote>
        Omit <code>type</code> attributes for style sheets and scripts.
      </blockquote>
      <div class="section-description">
        <p>
          Do not use <code>type</code> attributes for style sheets
          (unless not using CSS) and scripts (unless not using
          JavaScript).
        </p>
        <p>
          Specifying <code>type</code> attributes in these contexts is
          not necessary as HTML5 implies
          <a href="http://www.whatwg.org/specs/web-apps/current-work/multipage/semantics.html#attr-style-type"><code>text/css</code></a>
          and
          <a href="http://www.whatwg.org/specs/web-apps/current-work/multipage/scripting-1.html#attr-script-type"><code>text/javascript</code></a>
          as defaults. This can be safely done even for older browsers.
        </p>
        <code class="bad-code">
          &lt;!-- Not recommended --&gt;
          &lt;link rel="stylesheet" href="//www.google.com/css/maia.css"
            type="text/css"&gt;
        </code>
        <code class="good-code">
          &lt;!-- Recommended --&gt;
          &lt;link rel="stylesheet" href="//www.google.com/css/maia.css"&gt;
        </code>
        <code class="bad-code">
          &lt;!-- Not recommended --&gt;
          &lt;script src="//www.google.com/js/gweb/analytics/autotrack.js"
            type="text/javascript"&gt;&lt;/script&gt;
        </code>
        <code class="good-code">
          &lt;!-- Recommended --&gt;
          &lt;script src="//www.google.com/js/gweb/analytics/autotrack.js"&gt;&lt;/script&gt;
        </code>
      </div>

  <h2>HTML Formatting Rules</h2>
    <h3>General formatting</h3>
      <blockquote>
        Use a new line for every block, list, or table element, and
        indent every such child element.
      </blockquote>
      <div class="section-description">
        <p>
          Independent of the styling of an element (as CSS allows
          elements to assume a different role per <code>display</code>
          property), put every block, list, or table element on a new
          line.
        </p>
        <p>
          Also, indent them if they are child elements of a block,
          list, or table element.
        </p>
        <p>
          (If you run into issues around whitespace between list items
          it&#8217;s acceptable to put all <code>li</code> elements in one
          line. A linter is encouraged to throw a warning instead of
          an error.)
        </p>
        <code class="good-code">
          &lt;blockquote&gt;
            &lt;p&gt;&lt;em&gt;Space&lt;/em&gt;, the final frontier.&lt;/p&gt;
          &lt;/blockquote&gt;
        </code>
        <code class="good-code">
          &lt;ul&gt;
            &lt;li&gt;Moe
            &lt;li&gt;Larry
            &lt;li&gt;Curly
          &lt;/ul&gt;
        </code>
        <code class="good-code">
          &lt;table&gt;
            &lt;thead&gt;
              &lt;tr&gt;
                &lt;th scope="col"&gt;Income
                &lt;th scope="col"&gt;Taxes
            &lt;tbody&gt;
              &lt;tr&gt;
                &lt;td&gt;$ 5.00
                &lt;td&gt;$ 4.50
          &lt;/table&gt;
        </code>
      </div>
    <h3>HTML quotation marks</h3>
      <blockquote>
        When quoting attributes values, use double quotation marks.
      </blockquote>
      <div class="section-description">
        <p>
          Use double (<code>""</code>) rather than single quotation marks
          (<code>''</code>) around attribute values.
        </p>
        <code class="bad-code">
          &lt;!-- Not recommended --&gt;
          &lt;a class='maia-button maia-button-secondary'&gt;Sign in&lt;/a&gt;
        </code>
        <code class="good-code">
          &lt;!-- Recommended --&gt;
          &lt;a class="maia-button maia-button-secondary"&gt;Sign in&lt;/a&gt;
        </code>
      </div>

  <h2>CSS Style Rules</h2>
    <h3>CSS validity</h3>
      <blockquote>
        Use valid CSS where possible.
      </blockquote>
      <div class="section-description">
        <p>
          Unless dealing with CSS validator bugs or requiring
          proprietary syntax, use valid CSS code.
        </p>
        
        <p>
          Use tools such as the
          <a href="http://jigsaw.w3.org/css-validator/">W3C
          CSS validator</a> to test.
        </p>
        <p>
          Using valid CSS is a measurable baseline quality attribute
          that allows to spot CSS code that may not have any effect
          and can be removed, and that ensures proper CSS usage.
        </p>
      </div>
    <h3>ID and class naming</h3>
      <blockquote>
        Use meaningful or generic ID and class names.
      </blockquote>
      <div class="section-description">
        <p>
          Instead of presentational or cryptic names, always use ID
          and class names that reflect the purpose of the element in
          question, or that are otherwise generic.
        </p>
        <p>
          Names that are specific and reflect the purpose of the
          element should be preferred as these are most understandable
          and the least likely to change.
        </p>
        <p>
          Generic names are simply a fallback for elements that have no
          particular or no meaning different from their siblings. They are
          typically needed as &#8220;helpers.&#8221;
        </p>
        <p>
          Using functional or generic names reduces the probability of
          unnecessary document or template changes.
        </p>
        <code class="bad-code">
          /* Not recommended: meaningless */
          #yee-1901 {}

          /* Not recommended: presentational */
          .button-green {}
          .clear {}
        </code>
        <code class="good-code">
          /* Recommended: specific */
          #gallery {}
          #login {}
          .video {}

          /* Recommended: generic */
          .aux {}
          .alt {}
        </code>
      </div>
    <h3>ID and class name style</h3>
      <blockquote>
        Use ID and class names that are as short as possible but as long as
        necessary.
      </blockquote>
      <div class="section-description">
        <p>
          Try to convey what an ID or class is about while being as
          brief as possible.
        </p>
        <p>
          Using ID and class names this way contributes to acceptable
          levels of understandability and code efficiency.
        </p>
        <code class="bad-code">
          /* Not recommended */
          #navigation {}
          .atr {}
        </code>
        <code class="good-code">
          /* Recommended */
          #nav {}
          .author {}
        </code>
      </div>

    <h3>Type selectors</h3>
      <blockquote>
        Avoid qualifying ID and class names with type selectors.
      </blockquote>
      <div class="section-description">
        <p>Unless necessary (for example with helper classes), do not
          use element names in conjunction with IDs or classes.
        </p>
        <p>
          Avoiding unnecessary ancestor selectors is useful for
          <a href="http://www.stevesouders.com/blog/2009/06/18/simplifying-css-selectors/">performance
          reasons</a>.
        </p>
        <code class="bad-code">
          /* Not recommended */
          ul#example {}
          div.error {}
        </code>
        <code class="good-code">
          /* Recommended */
          #example {}
          .error {}
        </code>
      </div>
    <h3>Shorthand properties</h3>
      <blockquote>
        Use shorthand properties where possible.
      </blockquote>
      <div class="section-description">
        <p>
          CSS offers a variety of
          <a href="http://www.w3.org/TR/CSS21/about.html#shorthand">shorthand</a>
          properties (like <code>font</code>)
          that should be used whenever possible, even in cases where
          only one value is explicitly set.
        </p>
        <p>
          Using shorthand properties is useful for code efficiency and
          understandability.
        </p>
        <code class="bad-code">
          /* Not recommended */
          border-top-style: none;
          font-family: palatino, georgia, serif;
          font-size: 100%;
          line-height: 1.6;
          padding-bottom: 2em;
          padding-left: 1em;
          padding-right: 1em;
          padding-top: 0;
        </code>
        <code class="good-code">
          /* Recommended */
          border-top: 0;
          font: 100%/1.6 palatino, georgia, serif;
          padding: 0 1em 2em;
        </code>
      </div>
    <h3>0 and units</h3>
      <blockquote>
        Omit unit specification after &#8220;0&#8221; values.
      </blockquote>
      <div class="section-description">
        <p>
          Do not use units after <code>0</code> values unless they are
          required.
        </p>
        <code class="good-code">
          margin: 0;
          padding: 0;
        </code>
      </div>
    <h3>Leading 0s</h3>
      <blockquote>
        Omit leading &#8220;0&#8221;s in values.
      </blockquote>
      <div class="section-description">
        <p>
          Do not use put <code>0</code>s in front of values or lengths
          between -1 and 1.
        </p>
        <code class="good-code">
          font-size: .8em;
        </code>
      </div>
    <h3>Hexadecimal notation</h3>
      <blockquote>
        Use 3 character hexadecimal notation where possible.
      </blockquote>
      <div class="section-description">
        <p>
          For color values that permit it, 3 character hexadecimal
          notation is shorter and more succinct.
        </p>
        <code class="bad-code">
          /* Not recommended */
          color: #eebbcc;
        </code>
        <code class="good-code">
          /* Recommended */
          color: #ebc;
        </code>
      </div>
    <h3>Prefixes</h3>
      <blockquote>
        Prefix selectors with an application-specific prefix (optional).
      </blockquote>
      <div class="section-description">
        <p>
          In large projects as well as for code that gets embedded in
          other projects or on external sites use prefixes (as
          namespaces) for ID and class names. Use short, unique
          identifiers followed by a dash.
        </p>
        
        
        <p>
          Using namespaces helps preventing naming conflicts and can
          make maintenance easier, for example in search and replace
          operations.
        </p>
        <code class="good-code">
          .adw-help {} /* AdWords */
          #maia-note {} /* Maia */
        </code>
      </div>
    <h3>ID and class name delimiters</h3>
      <blockquote>
        Separate words in ID and class names by a hyphen.
      </blockquote>
      <div class="section-description">
        <p>
          Do not concatenate words and abbreviations in selectors by
          any characters (including none at all) other than hyphens,
          in order to improve understanding and scannability.
        </p>
        <code class="bad-code">
          /* Not recommended: does not separate the words &#8220;demo&#8221; and &#8220;image&#8221; */
          .demoimage {}

          /* Not recommended: uses underscore instead of hyphen */
          .error_status {}
        </code>
        <code class="good-code">
          /* Recommended */
          #video-id {}
          .ads-sample {}
        </code>
      </div>
    <h3>Hacks</h3>
      <blockquote>
        Avoid user agent detection as well as CSS &#8220;hacks&#8221;&#8212;try a different
        approach first.
      </blockquote>
      <div class="section-description">
        <p>
          It&#8217;s tempting to address styling differences over user
          agent detection or special CSS filters, workarounds, and
          hacks. Both approaches should be considered last resort in
          order to achieve and maintain an efficient and manageable
          code base. Put another way, giving detection and hacks a
          free pass will hurt projects in the long run as projects
          tend to take the way of least resistance. That is, allowing
          and making it easy to use detection and hacks means using
          detection and hacks more frequently&#8212;and more frequently
          is too frequently.
        </p>
        
        
      </div>

  <h2>CSS Formatting Rules</h2>
    <h3>Declaration order</h3>
      <blockquote>
        Alphabetize declarations.
      </blockquote>
      <div class="section-description">
        <p>
          Put declarations in alphabetical order in order to achieve
          consistent code in a way that is easy to remember and
          maintain.
        </p>
        <p>
          Ignore vendor-specific prefixes for sorting purposes. However,
          multiple vendor-specific prefixes for a certain CSS property should
          be kept sorted (e.g. -moz prefix comes before -webkit).
        </p>
        <code class="good-code">
          background: fuchsia;
          border: 1px solid;
          -moz-border-radius: 4px;
          -webkit-border-radius: 4px;
          border-radius: 4px;
          color: black;
          text-align: center;
          text-indent: 2em;
        </code>
      </div>
    <h3>Block content indentation</h3>
      <blockquote>
        Indent all block content.
      </blockquote>
      <div class="section-description">
        <p>
          Indent all <a href="http://www.w3.org/TR/CSS21/syndata.html#block">block
          content</a>, that is rules within rules as well as declarations, so to
          reflect hierarchy and improve understanding.
        </p>
        <code class="good-code">
          @media screen, projection {

            html {
              background: #fff;
              color: #444;
            }

          }
        </code>
      </div>
    <h3>Declaration stops</h3>
      <blockquote>
        Use a semicolon after every declaration.
      </blockquote>
      <div class="section-description">
        <p>
          End every declaration with a semicolon for consistency and
          extensibility reasons.
        </p>
        <code class="bad-code">
          /* Not recommended */
          .test {
            display: block;
            height: 100px
          }
        </code>
        <code class="good-code">
          /* Recommended */
          .test {
            display: block;
            height: 100px;
          }
        </code>
      </div>
    <h3>Property name stops</h3>
      <blockquote>
        Use a space after a property name&#8217;s colon.
      </blockquote>
      <div class="section-description">
        <p>
          Always use a single space between property and value (but no
          space between property and colon) for consistency reasons.
        </p>
        <code class="bad-code">
          /* Not recommended */
          h3 {
            font-weight:bold;
          }
        </code>
        <code class="good-code">
          /* Recommended */
          h3 {
            font-weight: bold;
          }
        </code>
      </div>
    <h3>Selector and declaration separation</h3>
      <blockquote>
        Separate selectors and declarations by new lines.
      </blockquote>
      <div class="section-description">
        <p>
          Always start a new line for each selector and declaration.
        </p>
        <code class="bad-code">
          /* Not recommended */
          a:focus, a:active {
            position: relative; top: 1px;
          }
        </code>
        <code class="good-code">
          /* Recommended */
          h1,
          h2,
          h3 {
            font-weight: normal;
            line-height: 1.2;
          }
        </code>
      </div>
    <h3>Rule separation</h3>
      <blockquote>
        Separate rules by new lines.
      </blockquote>
      <div class="section-description">
        <p>
          Always put a line between rules.
        </p>
        <code class="good-code">
          html {
            background: #fff;
          }

          body {
            margin: auto;
            width: 50%;
          }
        </code>
      </div>
    <h3>CSS quotation marks</h3>
      <blockquote>
        Use single quotation marks for attribute selectors and property values.
      </blockquote>
      <div class="section-description">
        <p>
          Use single (<code>''</code>) rather than double (<code>""</code>)
          quotation marks for attribute selectors or property values. Do not
          use quotation marks in URI values (<code>url()</code>).
        </p>
        <p>
          Exception: If you do need to use the <code>@charset</code> rule,
          use double quotation marks&#8212;<a href="http://www.w3.org/TR/CSS21/syndata.html#charset">single
          quotation marks are not permitted</a>.
        </p>
        <code class="bad-code">
          /* Not recommended */
          @import url("//www.google.com/css/maia.css");

          html {
            font-family: "open sans", arial, sans-serif;
          }
        </code>
        <code class="good-code">
          /* Recommended */
          @import url(//www.google.com/css/maia.css);

          html {
            font-family: 'open sans', arial, sans-serif;
          }
        </code>
      </div>

  <h2>CSS Meta Rules</h2>
    
    <h3>Section comments</h3>
      <blockquote>
        Group sections by a section comment (optional).
      </blockquote>
      <div class="section-description">
        <p>
          If possible, group style sheet sections together by using
          comments. Separate sections with new lines.
        </p>
        <code class="good-code">
          /* Header */

          #adw-header {}

          /* Footer */

          #adw-footer {}

          /* Gallery */

          .adw-gallery {}
        </code>
      </div>
</div>